// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// Representa um usuário no sistema.
/// Pode ser usado tanto para autenticação quanto para associação com outros dados (ex: carrinho).
model User {
  id            String      @id @default(cuid()) /// Identificador único do usuário (gerado com CUID)
  name          String?                     /// Nome do usuário (opcional)
  email         String?     @unique         /// Email do usuário (opcional, mas único)
  emailVerified DateTime?                  /// Data de verificação do email (opcional)
  image         String?                    /// URL da imagem de perfil (opcional)
  accounts      Account[]                  /// Contas externas conectadas (ex: Google, GitHub)
  sessions      Session[]                  /// Sessões ativas do usuário
  carts         ShopCart[]                 /// Itens no carrinho de compras relacionados ao usuário
  role          String      @default("user") /// Função do usuário (ex: "user", "admin")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
//fim das models do auth


/// Representa um produto disponível para compra.
model Product {
  id        Int         @id @default(autoincrement()) /// Identificador único do produto
  nome      String                             /// Nome do produto
  preco     Float                              /// Preço do produto
  descricao String?                           /// Descrição (opcional)
  imageUrl String?
  carts     ShopCart[]                        /// Relação com os carrinhos que contêm esse produto
}

/// Representa um item em um carrinho de compras.
/// Cada registro conecta um usuário a um produto específico com uma quantidade.
model ShopCart {
  id         Int      @id @default(autoincrement()) /// Identificador único do item no carrinho
  user_id    String                                /// ID do usuário (chave estrangeira para `User`)
  product_id Int                                   /// ID do produto (chave estrangeira para `Product`)
  quantity   Int                                   /// Quantidade do produto no carrinho

  /// Relação com o modelo User.
  /// Ao deletar o usuário, os itens do carrinho dele também são removidos (Cascade).
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  /// Relação com o modelo Product.
  /// Ao deletar o produto, os itens do carrinho associados também são removidos (Cascade).
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}